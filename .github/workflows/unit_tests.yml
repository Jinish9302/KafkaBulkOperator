name: Unit Tests

on:
  pull_request:
  push:
    branches:
      - main
      - develop
      - '**/feature-*'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1 — Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2 — Setup Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Step 3 — Install dependencies
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.npm/_cacache
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      - name: Install dependencies
        run: npm ci

      # Step 4 — Build TypeScript package
      - name: Build package
        run: npm run build

      # Step 5 — Start Kafka (Docker Compose)
      - name: Restore Docker images cache
        uses: actions/cache@v4
        with:
          path: .cache/docker-images.tar
          # Primary key includes a hash of docker-compose.yml so the cache updates when compose changes
          key: ${{ runner.os }}-docker-images-${{ hashFiles('docker-compose.yml') }}
          # Fallback to a stable 'latest' key if the exact hashed cache isn't available
          restore-keys: |
            ${{ runner.os }}-docker-images-latest

      - name: Load cached Docker images if present
        run: |
          if [ -f .cache/docker-images.tar ]; then
            echo "Found cached Docker images archive, loading..."
            docker load -i .cache/docker-images.tar || true
          else
            echo "No cached Docker images archive found"
          fi

      - name: Start Kafka
        run: |
          # Build/pull images (use cached images when available)
          docker compose up -d --build
          echo "Waiting for Kafka broker..."
          for i in {1..30}; do
            if nc -z localhost 9092; then
              echo "✅ Kafka is ready!"
              break
            fi
            echo "⏳ Waiting... ($i/30)"
            sleep 3
          done

      # Step 6 — Run Jest tests
      - name: Run Jest tests
        run: npm test -- --runInBand

      # Step 7 — Clean up Docker containers
      - name: Stop containers
        if: always()
        run: docker compose down -v

      - name: Save Docker images cache
        if: always()
        run: |
          mkdir -p .cache

          # Try to determine images to save. Prefer docker compose images, but
          # fall back to parsing docker-compose.yml for `image:` entries. This
          # works when `docker compose images` returns nothing (e.g. different
          # compose project name or environment differences).
          IMAGES=$(docker compose images --quiet || true)

          if [ -z "$IMAGES" ]; then
            echo "docker compose images returned empty; extracting image names from docker-compose.yml"
            # Extract lines like 'image: repo/name:tag' (handles quoted values)
            FILE_IMAGES=$(grep -E '^[[:space:]]*image:' docker-compose.yml || true)
            if [ -n "$FILE_IMAGES" ]; then
              IMAGES=$(echo "$FILE_IMAGES" | sed -E 's/.*image:[[:space:]]*//; s/["\'\'']//g' | xargs)
            fi
          fi

          # Build the final list of images to save by checking local presence.
          IMG_LIST=""
          for I in $IMAGES; do
            if [ -n "$I" ] && docker image inspect "$I" >/dev/null 2>&1; then
              IMG_LIST="$IMG_LIST $I"
            else
              echo "Image not present locally: $I"
            fi
          done

          # If still empty, as a last resort try to save known Kafka image(s)
          if [ -z "$IMG_LIST" ]; then
            FALLBACK=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep -E 'apache/kafka' | head -n1 || true)
            if [ -n "$FALLBACK" ]; then
              IMG_LIST="$FALLBACK"
              echo "Using fallback image: $FALLBACK"
            fi
          fi

          IMG_LIST=$(echo "$IMG_LIST" | xargs)
          if [ -n "$IMG_LIST" ]; then
            echo "Saving images: $IMG_LIST"
            docker save $IMG_LIST -o .cache/docker-images.tar || true
          else
            echo "No images found to save"
          fi

      - name: Cache saved Docker images
        uses: actions/cache@v4
        with:
          path: .cache/docker-images.tar
          # Save under the hash-based key so a new cache is created when docker-compose.yml changes
          key: ${{ runner.os }}-docker-images-${{ hashFiles('docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-images-latest
